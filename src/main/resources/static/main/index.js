import {
    handleLogout, tryRefreshTokens, fetchWithAuth, startTokenAutoRefresh, getCurrentUserId
} from '../utils/authUtils.js';

import {
    showConfirm, createModal, showAlert
} from '../utils/modalUtils.js';

import {
    collectFiltersFromForm, updateSelectedCategories, initCategorySearch, validateDates, debounce
} from '../utils/filterUtils.js';

let currentPage = 1;
let selectedCategories = [];

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `fetchWithAuth` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
 *
 * @example
 * await loadInternships({ mode: 'advanced', category: 'IT' });
 */
async function loadInternships(searchParams = {}) {
    const isSearch = Boolean(searchParams.mode);
    const pageIndex = currentPage - 1;
    const url = isSearch ? `/ims/internships/search?pageNumber=${pageIndex}` : `/ims/internships?pageNumber=${pageIndex}`;

    const fetchOptions = {
        method: isSearch ? 'POST' : 'GET', ...(isSearch && {
            headers: {'Content-Type': 'application/json'}, body: JSON.stringify(searchParams)
        })
    };

    const res = await fetchWithAuth(url, fetchOptions);
    if (!res) return;
    if (!res.ok) {
        showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫');
        return;
    }
    const data = await res.json();
    displayInternships(data.content);
    renderPagination(data.totalPages);
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.
 */
function displayInternships(internships) {
    const container = document.getElementById('internshipsGrid');
    const pag = document.getElementById('pagination');
    const isAdmin = localStorage.getItem('admin') === 'true';

    if (!internships.length) {
        container.innerHTML = `
            <div class="no-results-message">
                –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :( <br>
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!
            </div>
        `;
        pag.style.display = 'none';
        return;
    }

    pag.style.display = '';

    container.innerHTML = internships.map(i => {
        const createdStr = new Date(i.createdAt).toLocaleDateString('ru-RU');
        const updatedStr = i.updatedAt ? new Date(i.updatedAt).toLocaleDateString('ru-RU') : null;

        const categoriesHtml = i.categoriesData?.map(c => `<span class="category-badge">${c.title}</span>`).join(' ') || '';

        return `
        <div class="internship-card">
            <img src="${i.logoUrl}" alt="${i.title}" class="internship-logo">
            <h3>${i.title}</h3>
            <div class="categories-container">${categoriesHtml}</div>
            <p class="description">üìå${i.description.substring(0, 250)}‚Ä¶</p>
            <p class="payment-type">
                ${i.paymentType === 'PAID' ? 'üí≤–û–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞' : '‚ùé–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞'}
            </p>
            <p class="location">üåç ${i.address}</p>
            <p class="created">üóìÔ∏è–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createdStr}</p>
            ${updatedStr ? `<p class="updated">üìÖ–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updatedStr}</p>` : ''}
            <div class="card-actions">
                <button class="details-btn" onclick="showDetails(${i.internshipId})">
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
                <button class="favorite-btn" onclick="addToFavorites(${i.internshipId})">
                  –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                </button>
                ${isAdmin ? `
                    <button class="edit-btn" onclick="editInternship(${i.internshipId})">‚úèÔ∏è</button>
                    <button class="delete-btn" onclick="deleteInternship(${i.internshipId})">üóëÔ∏è</button>
                ` : ''}
            </div>
        </div>`;
    }).join('');
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—è —Ñ–æ—Ä–º—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.
 * –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 *
 * @param {number} id - ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.
 */
async function editInternship(id) {
    const token = localStorage.getItem('token');
    if (!token) return showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');

    // 1 - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    let dto;
    try {
        const res = await fetch(`/ims/internships/${id}`, {
            headers: {'Authorization': `Bearer ${token}`}
        });
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        dto = await res.json();
    } catch (e) {
        return showAlert(e.message, '–û—à–∏–±–∫–∞');
    }

    // 2 - —Ä–∏—Å—É–µ–º –º–æ–¥–∞–ª–∫—É
    const backdrop = document.createElement('div');
    backdrop.className = 'modal-backdrop';
    const win = document.createElement('div');
    win.className = 'modal-window';
    win.innerHTML = `
      <button class="modal-close-btn">&times;</button>
      <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É</h2>
      <div class="modal-body">
        <form id="editForm">
          <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
          <input type="text" name="title" value="${dto.title}" required minlength="5" maxlength="100">
  
          <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <textarea name="description" rows="4" required minlength="250" maxlength="2500">${dto.description}</textarea>
  
          <label>–¢–∏–ø –æ–ø–ª–∞—Ç—ã</label>
          <select name="paymentType" required>
            <option value="PAID"   ${dto.paymentType === 'PAID' ? 'selected' : ''}>–û–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è</option>
            <option value="UNPAID" ${dto.paymentType === 'UNPAID' ? 'selected' : ''}>–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è</option>
          </select>
  
          <label>–ì–æ—Ä–æ–¥</label>
          <input type="text" name="address" value="${dto.address}" required minlength="2" maxlength="100">
  
          <label>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
          <div id="editCategorySearch" class="category-search">
            <input type="text" id="editCategoryInput" placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚Ä¶">
            <select id="editCategoryList" multiple size="5"></select>
            <div id="editSelectedCategories" class="selected-categories"></div>
          </div>
  
          <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ <button type="button" id="addContactBtn">Ôºã</button></label>
          <div id="contactContainer" style="margin-bottom:20px;"></div>
  
          <label>–õ–æ–≥–æ—Ç–∏–ø (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
          <input type="file" name="logoImg" accept="image/*">
          <input type="hidden" name="logoUrl" value="${dto.logoUrl}">
        </form>
      </div>
      <div class="modal-actions">
        <button type="button" class="cancel">–û—Ç–º–µ–Ω–∞</button>
        <button type="submit" form="editForm" class="ok-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </div>
    `;
    backdrop.appendChild(win);
    document.body.appendChild(backdrop);
    document.body.style.overflow = 'hidden';

    // –∞–≤—Ç–æ—Ä–∞–∑–º–µ—Ä textarea
    const descTextarea = win.querySelector('textarea[name="description"]');
    if (descTextarea) {
        descTextarea.style.overflow = 'hidden';
        descTextarea.style.resize = 'none';
        descTextarea.addEventListener('input', function () {
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
        });
        descTextarea.dispatchEvent(new Event('input'));
    }

    // –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
    win.querySelector('.modal-close-btn').onclick = win.querySelector('.cancel').onclick = () => {
        document.body.removeChild(backdrop);
        document.body.style.overflow = '';
    };

    // === –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
    let editSelected = [];
    const inp = win.querySelector('#editCategoryInput');
    const listBox = win.querySelector('#editCategoryList');
    const tags = win.querySelector('#editSelectedCategories');

    function renderEditCategoryTags() {
        tags.innerHTML = editSelected.map(c => `<div class="category-tag">
               ${c.title}
               <span data-id="${c.id}" class="remove-category">&times;</span>
             </div>`).join('');
        tags.querySelectorAll('.remove-category').forEach(btn => {
            const cid = btn.dataset.id;
            if (editSelected.length <= 1) {
                btn.style.opacity = '0.3';
                btn.style.cursor = 'default';
                btn.onclick = null;
            } else {
                btn.style.opacity = '1';
                btn.style.cursor = 'pointer';
                btn.onclick = () => {
                    editSelected = editSelected.filter(c => c.id !== cid);
                    renderEditCategoryTags();
                };
            }
        });
    }

    inp.addEventListener('input', debounce(async () => {
        const q = inp.value.trim();
        if (q.length < 2) {
            listBox.innerHTML = '';
            return;
        }
        const res = await fetchWithAuth(`/ims/categories/autocomplete?searchStr=${encodeURIComponent(q)}`, {method: 'GET'});
        if (!res.ok) return;
        const cats = await res.json();
        listBox.innerHTML = cats.map(cat => `<option value="${cat.categoryId}" data-title="${cat.title}">${cat.title}</option>`).join('');
    }), 300);

    listBox.addEventListener('dblclick', () => {
        Array.from(listBox.selectedOptions).forEach(opt => {
            const id = opt.value, title = opt.dataset.title;
            if (!editSelected.some(c => c.id === id)) editSelected.push({id, title});
        });
        inp.value = '';
        listBox.innerHTML = '';
        renderEditCategoryTags();
    });

    dto.categoriesData.forEach(c => editSelected.push({id: String(c.categoryId), title: c.title}));
    renderEditCategoryTags();

    // === –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
    const contactContainer = win.querySelector('#contactContainer');
    const CONTACT_TYPES = ['TELEGRAM', 'EMAIL', 'WEBSITE'];

    function addContactRow(type = 'TELEGRAM', value = '') {
        const row = document.createElement('div');
        row.className = 'contact-row';
        row.innerHTML = `
          <select class="contact-type">
            ${CONTACT_TYPES.map(t => `<option value="${t}">${t}</option>`).join('')}
          </select>
          <input type="text" class="contact-val" value="${value}" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ">
          <button type="button" class="remove-contact">&times;</button>
        `;
        row.querySelector('.contact-type').value = type;
        row.querySelector('.remove-contact').onclick = () => {
            if (contactContainer.children.length > 1) row.remove();
        };
        contactContainer.appendChild(row);
    }

    dto.contactData.forEach(c => addContactRow(c.type, c.value));
    win.querySelector('#addContactBtn').onclick = () => addContactRow();

    // === –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ===
    win.querySelector('#editForm').onsubmit = async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const contactData = Array.from(contactContainer.children).map(row => ({
            type: row.querySelector('.contact-type').value, value: row.querySelector('.contact-val').value.trim()
        }));

        const updateDto = {
            internshipId: id,
            title: formData.get('title'),
            description: formData.get('description'),
            paymentType: formData.get('paymentType'),
            address: formData.get('address'),
            categoriesIds: editSelected.map(c => c.id),
            contactData,
            logoUrl: formData.get('logoUrl')
        };

        const fd = new FormData();
        fd.append('dto', new Blob([JSON.stringify(updateDto)], {type: 'application/json'}));
        const file = formData.get('logoImg');
        if (file && file.size) fd.append('logoImg', file);

        try {
            const res = await fetchWithAuth('/ims/internships', {
                method: 'PUT', body: fd
            });
            if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
            await showAlert('–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', '–£—Å–ø–µ—Ö');
            document.body.removeChild(backdrop);
            document.body.style.overflow = '';
            loadInternships();
        } catch (err) {
            showAlert(err.message, '–û—à–∏–±–∫–∞');
        }
    };
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –ø–æ ID –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
 * –ü—Ä–∏ —É—Å–ø–µ—Ö–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫.
 *
 * @param {number} id - ID —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
 */
async function deleteInternship(id) {
    const token = localStorage.getItem('token');
    if (!token) {
        showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
        return;
    }

    const ok = await showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É?', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ');
    if (!ok) return;

    try {
        const res = await fetch(`/ims/internships/${id}`, {
            method: 'DELETE', headers: {
                'Authorization': `Bearer ${token}`,
            }
        });

        if (!res.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É');
        }

        loadInternships();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:', error);
        showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏');
    }
}


/**
 * –†–∏—Å—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü.
 *
 * @param {number} totalPages - –û–±—â–µ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
 */
function renderPagination(totalPages) {
    const pag = document.getElementById('pagination');
    const delta = 2;
    const range = [];
    const start = Math.max(2, currentPage - delta);
    const end = Math.min(totalPages - 1, currentPage + delta);

    range.push(1);
    if (start > 2) range.push('...');
    for (let i = start; i <= end; i++) range.push(i);
    if (end < totalPages - 1) range.push('...');
    if (totalPages > 1) range.push(totalPages);

    pag.innerHTML = range.map(p => p === '...' ? `<span class="dots">...</span>` : `<button class="${p === currentPage ? 'active' : ''}" onclick="goToPage(${p})">${p}</button>`).join('');
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.
 *
 * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 */
function goToPage(page) {
    currentPage = page;
    const form = document.getElementById('filterForm');
    if (form.dataset.mode === 'search') {
        loadInternships(collectFiltersFromForm(selectedCategories));
    } else {
        loadInternships();
    }
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫.
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é.
 */
function applyCurrentFilters() {
    currentPage = 1;
    document.getElementById('filterForm').dataset.mode = 'search';
    loadInternships(collectFiltersFromForm(selectedCategories));
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Ñ–æ—Ä–º—ã, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—à–∏–±–∫–∏.
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
 */
function resetFilters() {
    const form = document.getElementById('filterForm');
    form.reset();
    form.dataset.mode = '';
    selectedCategories = [];
    updateSelectedCategories(selectedCategories, handleRemoveCategory);
    currentPage = 1;

    document.getElementById('searchError').textContent = '';
    document.getElementById('dateError').textContent = '';

    loadInternships();
}

function handleRemoveCategory(categoryId) {
    selectedCategories = selectedCategories.filter(c => c.id !== categoryId);
    updateSelectedCategories(selectedCategories, handleRemoveCategory);
}

function handleCategorySelect(newCategories) {
    newCategories.forEach(newCat => {
        if (!selectedCategories.some(c => c.id === newCat.id)) {
            selectedCategories.push(newCat);
        }
    });
    updateSelectedCategories(selectedCategories, handleRemoveCategory);
}

document.addEventListener('DOMContentLoaded', async () => {
    if (!localStorage.getItem('token')) {
        window.location.href = '/auth/index.html';
        return;
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ —Ä–æ–ª–∏
    await tryRefreshTokens();
    startTokenAutoRefresh();
    const isAdmin = localStorage.getItem('admin') === 'true';

    // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const nav = document.querySelector('.site-nav');
    const profileLink = nav.querySelector('a[href="/favorite/index.html"]');
    const categoriesLink = nav.querySelector('a[href="/category/index.html"]');

    profileLink.textContent = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ';
    profileLink.href = '/favorite/index.html';

    if (!isAdmin) {
        // —Ç–æ–ª—å–∫–æ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª, –ø—Ä–∏–∂–∞—Ç–æ–µ –≤–ø—Ä–∞–≤–æ
        nav.innerHTML = '';
        nav.appendChild(profileLink);
        nav.style.justifyContent = 'flex-end';
    } else {
        // –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –æ–±–∞ –ø—É–Ω–∫—Ç–∞ –≤ –æ–±—ã—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        nav.innerHTML = '';
        nav.appendChild(profileLink);
        nav.appendChild(categoriesLink);
        nav.style.justifyContent = '';
    }

    // –∫–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–∏—Å–∫–∞
    const addBtn = document.getElementById('addInternBtn');
    const searchContainer = document.querySelector('.search-container');
    if (!isAdmin) {
        addBtn.style.display = 'none';
        searchContainer.classList.add('user-only');
    }

    // –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    const dateErrorEl = document.getElementById('dateError');
    const startInput = document.getElementById('startDate');
    const endInput = document.getElementById('endDate');

    function validateDates() {
        dateErrorEl.textContent = '';
        const s = startInput.value, e = endInput.value;
        if (s && e && new Date(s) > new Date(e)) {
            dateErrorEl.textContent = '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è';
        }
    }

    startInput.addEventListener('change', validateDates);
    endInput.addEventListener('change', validateDates);

    // –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    loadInternships();
    initCategorySearch(handleCategorySelect, fetchWithAuth);

    // –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    startInput.addEventListener('change', validateDates);
    endInput.addEventListener('change', validateDates);

    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
    const searchErrorEl = document.getElementById('searchError');
    document.getElementById('filterForm').addEventListener('submit', function (e) {
        e.preventDefault();
        searchErrorEl.textContent = '';
        validateDates();
        if (dateErrorEl.textContent) {
            (startInput.value && endInput.value) ? endInput.focus() : startInput.focus();
            return;
        }
        const query = document.getElementById('searchInput').value.trim();
        if (!query) {
            searchErrorEl.textContent = '–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
            document.getElementById('searchInput').focus();
            return;
        }
        if (query.length < 2) {
            searchErrorEl.textContent = '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞';
            document.getElementById('searchInput').focus();
            return;
        }
        applyCurrentFilters();
    });

    // —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.getElementById('resetFilters')
        .addEventListener('click', resetFilters);

    // –ø–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.querySelector('.dropdown-btn')
        .addEventListener('click', () => {
            document.querySelector('.dropdown-content').classList.toggle('show');
        });

    // –∫–Ω–æ–ø–∫–∞ –ª–æ–≥–∞—É—Ç–∞
    document.querySelector('.logout-btn')
        .addEventListener('click', handleLogout);
});

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–µ–∫–µ–Ω–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
 * @param {number} internshipId - ID —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
 */
async function addToFavorites(internshipId) {
    const token = localStorage.getItem('token');
    if (!token) {
        return showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.', '–û—à–∏–±–∫–∞');
    }

    const userId = await getCurrentUserId();
    if (!userId) {
        return showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', '–û—à–∏–±–∫–∞');
    }

    try {
        const res = await fetch(`/ims/users/${userId}/favorites/${internshipId}`, {
            method: 'POST', headers: {
                'Authorization': `Bearer ${token}`,
            }
        });

        if (!res.ok) {
            throw new Error(`–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –ª–∏–±–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: HTTP_STATUS_${res.status}`);
        }

        await showAlert('–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', '–£—Å–ø–µ—Ö');
    } catch (error) {
        showAlert(error.message, '–û—à–∏–±–∫–∞');
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë –¥–∞–Ω–Ω—ã–º–∏
 */
async function showDetails(id) {
    // 1 - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    const modal = document.getElementById('detailsModal');
    modal.classList.add('show');
    document.body.classList.add('modal-open');  // –∑–∞–ø—Ä–µ—â–∞–µ–º —Å–∫—Ä–æ–ª–ª –±–æ–¥–∏

    // 2 - –∑–∞–≥—Ä—É–∂–∞–µ–º DTO —Å –±—ç–∫–µ–Ω–¥–∞
    try {
        const token = localStorage.getItem('token');
        const res = await fetch(`/ims/internships/${id}`, {
            headers: {'Authorization': `Bearer ${token}`}
        });
        if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        const dto = await res.json();

        // 3 - —Ä–µ–Ω–¥–µ—Ä–∏–º –∫—Ä–∞—Å–∏–≤—ã–π HTML
        document.getElementById('modalBody').innerHTML = formatDto(dto);
    } catch (e) {
        document.getElementById('modalBody').innerHTML = `<p style="color:red">–û—à–∏–±–∫–∞: ${e.message}</p>`;
    }
}

function hideDetails() {
    const modal = document.getElementById('detailsModal');
    modal.classList.remove('show');
    document.body.classList.remove('modal-open');  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª
}

function formatDto(d) {
    const paidText = d.paymentType === 'PAID' ? '–û–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è' : '–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è';
    return `
    <img src="${d.logoUrl}" alt="${d.title}" />
    <h2>${d.title}</h2>
    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong><br>${d.description.replace(/\n/g, '<br>')}</p>
    <p><strong>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</strong> ${paidText}</p>
    <p><strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</strong><br>
      ${d.contactData.map(c => `${c.type}: ${c.value}`).join('<br>')}
    </p>
    <p><strong>–ì–æ—Ä–æ–¥:</strong> ${d.address}</p>
    <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</strong> ${d.categoriesData.map(c => c.title).join(', ')}</p>
    <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(d.createdAt).toLocaleString()}</p>
    ${d.updatedAt ? `<p><strong>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</strong> ${new Date(d.updatedAt).toLocaleString()}</p>` : ''}
   `;
}

document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('detailsModal');
    const closeBtn = modal.querySelector('.close');

    // –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å .modal
    modal.addEventListener('click', e => {
        if (e.target === modal) {
            hideDetails();
        }
    });
});

/**
 * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏,
 * —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã.
 * –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞).
 */
async function addInternship() {
    const token = localStorage.getItem('token');
    if (!token) return showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');

    const backdrop = document.createElement('div');
    backdrop.className = 'modal-backdrop';
    const win = document.createElement('div');
    win.className = 'modal-window';
    win.innerHTML = `
      <button class="modal-close-btn">&times;</button>
      <h2>–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É</h2>
      <div class="modal-body">
        <form id="createForm">
          <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
          <input type="text" name="title" required minlength="5" maxlength="100"
                 placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏">

          <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <textarea name="description" rows="4" required minlength="250" maxlength="2500"
                    placeholder="–û–ø–∏—à–∏—Ç–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É (–º–∏–Ω–∏–º—É–º 250 —Å–∏–º–≤–æ–ª–æ–≤)"></textarea>

          <label>–¢–∏–ø –æ–ø–ª–∞—Ç—ã</label>
          <select name="paymentType" required>
            <option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã</option>
            <option value="PAID">–û–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è</option>
            <option value="UNPAID">–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è</option>
          </select>

          <label>–ì–æ—Ä–æ–¥</label>
          <input type="text" name="address" required minlength="2" maxlength="100"
                 placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥">

          <label>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
          <div id="createCategorySearch" class="category-search">
            <input type="text" id="createCategoryInput" placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚Ä¶">
            <select id="createCategoryList" multiple size="5"></select>
            <div id="createSelectedCategories" class="selected-categories"></div>
          </div>

          <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ <button type="button" id="addContactBtnCreate">Ôºã</button></label>
          <div id="createContactContainer" style="margin-bottom:20px;"></div>

          <label>–õ–æ–≥–æ—Ç–∏–ø (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
          <input type="file" name="logoImg" accept="image/*">
        </form>
      </div>
      <div class="modal-actions">
        <button type="button" class="cancel">–û—Ç–º–µ–Ω–∞</button>
        <button type="submit" form="createForm" class="ok-btn">–°–æ–∑–¥–∞—Ç—å</button>
      </div>
    `;
    backdrop.appendChild(win);
    document.body.appendChild(backdrop);
    document.body.style.overflow = 'hidden';

    // –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
    win.querySelector('.modal-close-btn').onclick = win.querySelector('.cancel').onclick = () => {
        document.body.removeChild(backdrop);
        document.body.style.overflow = '';
    };

    // === –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
    let selectedForCreate = [];
    const inp = win.querySelector('#createCategoryInput');
    const listBox = win.querySelector('#createCategoryList');
    const tags = win.querySelector('#createSelectedCategories');

    function renderCategoryTags() {
        tags.innerHTML = selectedForCreate.map(c => `<div class="category-tag">
               ${c.title}
               <span data-id="${c.id}" class="remove-category">&times;</span>
             </div>`).join('');
        tags.querySelectorAll('.remove-category').forEach(btn => {
            btn.onclick = () => {
                selectedForCreate = selectedForCreate.filter(c => c.id !== btn.dataset.id);
                renderCategoryTags();
            };
        });
    }

    inp.addEventListener('input', debounce(async () => {
        const q = inp.value.trim();
        if (q.length < 2) {
            listBox.innerHTML = '';
            return;
        }
        const res = await fetchWithAuth(`/ims/categories/autocomplete?searchStr=${encodeURIComponent(q)}`, {method: 'GET'});
        if (!res.ok) return;
        const cats = await res.json();
        listBox.innerHTML = cats.map(cat => `<option value="${cat.categoryId}" data-title="${cat.title}">${cat.title}</option>`).join('');
    }), 300);

    listBox.addEventListener('dblclick', () => {
        Array.from(listBox.selectedOptions).forEach(opt => {
            const id = opt.value, title = opt.dataset.title;
            if (!selectedForCreate.some(c => c.id === id)) selectedForCreate.push({id, title});
        });
        inp.value = '';
        listBox.innerHTML = '';
        renderCategoryTags();
    });

    // === –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
    const createContactContainer = win.querySelector('#createContactContainer');
    const CONTACT_TYPES = ['TELEGRAM', 'EMAIL', 'WEBSITE'];

    function addContactRow(container) {
        const row = document.createElement('div');
        row.className = 'contact-row';
        row.innerHTML = `
          <select class="contact-type">
            ${CONTACT_TYPES.map(t => `<option value="${t}">${t}</option>`).join('')}
          </select>
          <input type="text" class="contact-val" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ">
          <button type="button" class="remove-contact">&times;</button>
        `;
        row.querySelector('.remove-contact').onclick = () => {
            if (container.children.length > 1) row.remove();
        };
        container.appendChild(row);
    }

    win.querySelector('#addContactBtnCreate').onclick = () => addContactRow(createContactContainer);

    // === –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ===
    win.querySelector('#createForm').onsubmit = async e => {
        e.preventDefault();
        const form = e.target;
        const fd = new FormData();

        const dto = {
            title: form.title.value.trim(),
            description: form.description.value.trim(),
            paymentType: form.paymentType.value,
            address: form.address.value.trim(),
            categoriesIds: selectedForCreate.map(c => c.id),
            contactData: Array.from(createContactContainer.children).map(row => ({
                type: row.querySelector('.contact-type').value, value: row.querySelector('.contact-val').value.trim()
            }))
        };

        fd.append('dto', new Blob([JSON.stringify(dto)], {type: 'application/json'}));
        const file = form.logoImg.files[0];
        if (file) fd.append('logoImg', file);

        try {
            const res = await fetchWithAuth('/ims/internships/create', {
                method: 'POST', body: fd
            });
            if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏');
            await showAlert('–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', '–£—Å–ø–µ—Ö');
            document.body.removeChild(backdrop);
            document.body.style.overflow = '';
            loadInternships();
        } catch (err) {
            showAlert(err.message, '–û—à–∏–±–∫–∞');
        }
    };
}

document.getElementById('addInternBtn')
    .addEventListener('click', addInternship);

document.getElementById('homeLink').addEventListener('click', function () {
    window.location.href = 'http://localhost:8080/main/index.html';
});

window.showDetails = showDetails;
window.addToFavorites = addToFavorites;
window.editInternship = editInternship;
window.deleteInternship = deleteInternship;
window.goToPage = goToPage;
window.hideDetails = hideDetails;